---
title: "Possible Topics"
author: "Bagas Trilaksonoaji"
date: "`r Sys.Date()`"
format: 
  html:
    toc: true
    number-sections: true
editor: visual
editor_options: 
  chunk_output_type: console
execute: 
  echo: false
  message: false
  warning: false
cache: true
---

```{r}
library(tidyverse)
library(chron)


```

# Cross Trade

```{r}
all_1pg <- read.csv("data/1pg-all-dates.csv")
order_1pg <- all_1pg |> filter(RecordType %in% c("ENTER", "AMEND", "DELETE"))
trade_1pg <- all_1pg |> filter(RecordType %in% c("TRADE"),
                               !(Qualifiers %in% c("CX Bi", "CX Si", "CX"))) |>
  mutate(prev_price = lag(Price),
         change_price = Price - prev_price)
```

```{r}
xt <- trade_1pg |> filter(Qualifiers %in% c("XT Bi", "XT Si"))

# XT vs all trade
trade_1pg |> ggplot() +
  geom_col(aes(x = RecordDate, y = Volume), fill = "steelblue") +
  geom_col(data = xt, aes(x = RecordDate, y = Volume), fill = "maroon") +
  labs(title = "XT compared to All Trade by Volume",
       subtitle = "Stock: 1PG")

trade_1pg |> ggplot() +
  geom_bar(aes(x = RecordDate), fill = "steelblue") +
  geom_bar(data = xt, aes(x = RecordDate), fill = "maroon") +
  labs(title = "XT compared to All Trade by Frequency",
       subtitle = "Stock: 1PG")

# price impact
xt_pi <- xt |> mutate(change_price = abs(change_price)) |> 
  group_by(RecordDate) |>
  summarise(price_impact = sum(change_price),
            freq = n())

trade_pi <- trade_1pg |> mutate(change_price = abs(change_price)) |> 
  group_by(RecordDate) |>
  summarise(price_impact = sum(change_price),
            freq = n())
  
pi <- left_join(xt_pi, trade_pi, by = "RecordDate") |> na.omit() |>
  rename(pi_xt = price_impact.x,
         pi_all = price_impact.y,
         freq_xt = freq.x,
         freq_all = freq.y)

pi |> mutate(xt = pi_xt / freq_xt,
             all = pi_all / freq_all) |>
  select(RecordDate, xt, all) |>
  pivot_longer(cols = c(xt, all), names_to = "tr_type", values_to = "price_impact") |>
  ggplot() +
  geom_col(aes(x = RecordDate, y = price_impact, fill = tr_type), position = "dodge") +
  labs(title = "Average Price Impact XT vs All Trade",
       subtitle = "Stock: 1PG",
       y = "Price Impact")

# XT broker count
xt |>
  count(BuyerBrokerID) |> 
  mutate(BuyerBrokerID = as.character(BuyerBrokerID)) |>
  ggplot() +
  geom_col(aes(x = fct_reorder(BuyerBrokerID, -n), y = n)) +
  labs(title = "XT Count by Broker",
       subtitle = "Stock: 1PG",
       x = "Broker ID", y = "XT Count")


```

## Why is it interesting?

- Cross trades are supposed to have a price impact similar to non-cross trades, as they are supposed to have no correlation. However, this early analysis shows that cross trade consistently have a higher price impact than non-cross trade, suggesting cross trades are more informed than non-cross trades.
- Those price-impacting cross trades are dominated by a retail broker (Institution brokers should have more information than retail brokers).
- In Indonesia, there is a nominee issue where brokers have their nominees trade on the exchange on behalf of themselves (secretly) to impact prices. Research on cross trades could be a preliminary step in addressing this issue.
- Not many papers focusing on the impact of cross trades on price discovery.

## What more can be done?

- Analyse special orders on the cross trades.
- Compare cross trades on ASX200 and non-ASX200.
- HFT on cross trades?

# Iceberg Order (1)

```{r}
ice200 <- read.csv("data/ASX200Icebergs2015.csv", header = FALSE, col.names = colnames(all_1pg))

icenon200 <- read.csv("data/nonASX200Icebergs2015.csv")

ice_1pg <- read.csv("data/1pg-iceberg-dates.csv")

```

```{r}
# ice200_top20 <- ice200 |> 
#   count(Instrument) |>
#   arrange(-n) |>
#   top_n(20) 
# 
# ice200_top20 |>
#   ggplot() +
#   geom_col(aes(x = fct_reorder(Instrument, -n), y = n))
# 
# ice200_fil <- ice200 |> filter(Instrument %in% ice200_top20$Instrument)

```

```{r}
# large non-iceberg order 
vol_filter <- ice_1pg |>
  filter(Volume >= 20000,
         RecordType %in% c("ENTER", "AMEND"))

ice_1pg_vol <- ice_1pg |>
  mutate(HourMinuteSecond = chron::times(HourMinuteSecond)) |> 
  filter(mykey %in% vol_filter$mykey |
                    RecordType == "TRADE",
         HourMinuteSecond >= chron::times("10:00:00"),
         HourMinuteSecond < chron::times("16:00:00"))

index <- which(ice_1pg_vol$RecordType == "ENTER")
neighbor_idx <- c(index - 2, index - 1, index, index + 1, index + 2, index + 3, index + 4, index + 5) |>
  unique() |>
  sort()
neighbor_idx <- neighbor_idx[neighbor_idx > 0 & neighbor_idx <= nrow(ice_1pg_vol)]

ice_1pg_voltr <- ice_1pg_vol[neighbor_idx, ] |>
  mutate(dttm = ymd_hms(paste(RecordDate, HourMinuteSecond)))
```

```{r}
# iceberg order
ice_filter <- ice_1pg |>
  filter(UndisclosedVolume > 0,
         RecordType %in% c("ENTER", "AMEND"))

ice_1pg_ice <- ice_1pg |>
  mutate(HourMinuteSecond = chron::times(HourMinuteSecond)) |> 
  filter(mykey %in% ice_filter$mykey |
                    RecordType == "TRADE",
         HourMinuteSecond >= chron::times("10:00:00"),
         HourMinuteSecond < chron::times("16:00:00"))

index2 <- which(ice_1pg_ice$RecordType == "ENTER")
neighbor_idx2 <- c(index2 - 2, index2 - 1, index2, index2 + 1, index2 + 2, index2 + 3, index2 + 4, index2 + 5) |>
  unique() |>
  sort()
neighbor_idx2 <- neighbor_idx2[neighbor_idx2 > 0 & neighbor_idx2 <= nrow(ice_1pg_ice)]

ice_1pg_icetr <- ice_1pg_ice[neighbor_idx2, ] |>
  mutate(dttm = ymd_hms(paste(RecordDate, HourMinuteSecond)))
```


```{r}
ice_1pg_voltr |> filter(RecordDate == "2015-01-12") |>
  ggplot() +
  geom_point(aes(x = dttm, y = Price, color = RecordType),
             alpha = 0.5) +
  labs(title = "Non-Iceberg Large Order, and Neighboring Trades",
       subtitle = "Sample: 12 Jan 2015, Stock: 1PG",
       x = "Time")

ice_1pg_icetr |> filter(RecordDate == "2015-03-13") |>
  ggplot() +
  geom_point(aes(x = dttm, y = Price, color = RecordType),
             alpha = 0.5) +
  labs(title = "Iceberg Order, and Neighboring Trades",
       subtitle = "Sample: 13 Mar 2015, Stock: 1PG",
       x = "Time")
```

```{r, eval = FALSE}
ice200 |> 
  mutate(ice_ratio = UndisclosedVolume/Volume) |>
  # filter(ice_ratio >= 100) |>
  ggplot() +
  geom_histogram(aes(x = ice_ratio), binwidth = 10)

icenon200 |> 
  mutate(ice_ratio = UndisclosedVolume/Volume) |>
  # filter(ice_ratio >= 100) |>
  ggplot() +
  geom_histogram(aes(x = ice_ratio), binwidth = 10)

# ice200$Instrument |> unique() |> length()
# icenon200$Instrument |> unique() |> length()
```

## What is interesting?

- Large non-iceberg orders do not drive price. Market participants were not taking this information into consideration (at least in non-ASX200 stocks).
- Similarly, as iceberg orders hide total orders, they do not drive the price.
- Hence, is there any benefit in using iceberg limit orders (in non-ASX200)?

## What more can be done?

- Analyse how large order impact order-price instead of trade-price. 

## Challenge

- Difficult to measure (drive or does not drive prices).

# Iceberg Order (2)

```{r, include=FALSE}
# find large aggresive order with iceberg
idx_ibtr <- which(ice_1pg_icetr$RecordType == "ENTER" & lead(ice_1pg_icetr$Price) == ice_1pg_icetr$Price)

neighbor_idxibtr <- c(idx_ibtr, idx_ibtr + 1, idx_ibtr + 2, idx_ibtr + 3, idx_ibtr + 4, idx_ibtr + 5) |>
  unique() |>
  sort()

ice_1pg_icetr[neighbor_idxibtr,]
```

```{r, include=FALSE}
# find large aggresive order without iceberg
idx_voltr <- which(ice_1pg_voltr$RecordType == "ENTER" & lead(ice_1pg_voltr$Price) == ice_1pg_voltr$Price)

neighbor_idxvoltr <- c(idx_voltr, idx_voltr + 1, idx_voltr + 2, idx_voltr + 3, idx_voltr + 4, idx_voltr + 5) |>
  unique() |>
  sort()

ice_1pg_voltr[neighbor_idxvoltr,]
```

```{r}
cross_tab <- data.frame(type = c("iceberg", "non_iceberg"),
                        aggresive = c(length(idx_ibtr),
                                    length(idx_voltr)),
                        total = c(nrow(ice_filter),
                                   nrow(vol_filter)))
cross_tab <- cross_tab |> pivot_longer(cols = c(aggresive, total),
                          names_to = "category",
                          values_to = "count")

cross_tab |> ggplot() +
  geom_col(aes(x = type, y = count, fill = category), position = position_dodge()) +
  labs(title = "Iceberg vs Large Orders",
       subtitle = "Stock: 1PG")

```

## What is interesting?

- Iceberg orders tend to have more aggressive, compared to non-iceberg large orders (large order = more than 20k stocks). Interesting to see what happen in ASX200.
- Previous paper focuses on the iceberg order on market-participant POV: how market participant put iceberg orders in the CLOB.
- This topic focuses on comparing how frequent iceberg-aggressive and noniceberg-aggressive large orders: Do market participant really care about leaving any information on aggressive orders? (more iceberg-aggressive orders means that they are really care)
- Comparing these could be beneficial in measuring how effective iceberg orders are in helping informed traders keep information. This can be a consideration in implementing iceberg orders in Indonesia.

## What more can be done?

- Compare the price impact between iceberg and non-iceberg large orders.

## Challenge

- Similar to previous paper.
- Difficult to measure price impact.  

# Center Point

```{r}
trade_cx_1pg <- all_1pg |> filter(RecordType %in% c("TRADE"))

idx_cx <- which(trade_cx_1pg$Qualifiers %in% c("CX Bi", "CX Si", "CX"))

neighbor_idxcx <- c(idx_cx - 10, idx_cx - 9, idx_cx - 8, idx_cx - 7, idx_cx - 6, idx_cx - 5, idx_cx - 4, idx_cx - 3, idx_cx - 2, idx_cx - 1, idx_cx) |>
  unique() |>
  sort()

cx_1pg <- trade_cx_1pg[neighbor_idxcx, ]

```

```{r}
# CX Bi for desperate seller, CX Si for desperate Buyer 
cx_lag1 <- cx_1pg |> filter((Qualifiers == "CX Bi" & lag(SellerBrokerID) == SellerBrokerID) |
                          (Qualifiers == "CX Si" & lag(BuyerBrokerID) == BuyerBrokerID) |
                          (Qualifiers == "CX" & lag(SellerBrokerID) == SellerBrokerID) |
                          (Qualifiers == "CX" & lag(BuyerBrokerID) == BuyerBrokerID))

cx_lag2 <- cx_1pg |> filter((Qualifiers == "CX Bi" & lag(SellerBrokerID, 2) == SellerBrokerID) |
                          (Qualifiers == "CX Si" & lag(BuyerBrokerID, 2) == BuyerBrokerID) |
                          (Qualifiers == "CX" & lag(SellerBrokerID, 2) == SellerBrokerID) |
                          (Qualifiers == "CX" & lag(BuyerBrokerID, 2) == BuyerBrokerID)) |>
  filter(!(mykey %in% cx_lag1$mykey))

cx_lag3 <- cx_1pg |> filter((Qualifiers == "CX Bi" & lag(SellerBrokerID, 3) == SellerBrokerID) |
                          (Qualifiers == "CX Si" & lag(BuyerBrokerID, 3) == BuyerBrokerID) |
                          (Qualifiers == "CX" & lag(SellerBrokerID, 3) == SellerBrokerID) |
                          (Qualifiers == "CX" & lag(BuyerBrokerID, 3) == BuyerBrokerID)) |>
  filter(!(mykey %in% cx_lag1$mykey),
         !(mykey %in% cx_lag2$mykey))

cx_lag4 <- cx_1pg |> filter((Qualifiers == "CX Bi" & lag(SellerBrokerID, 4) == SellerBrokerID) |
                          (Qualifiers == "CX Si" & lag(BuyerBrokerID, 4) == BuyerBrokerID) |
                          (Qualifiers == "CX" & lag(SellerBrokerID, 4) == SellerBrokerID) |
                          (Qualifiers == "CX" & lag(BuyerBrokerID, 4) == BuyerBrokerID)) |>
  filter(!(mykey %in% cx_lag1$mykey),
         !(mykey %in% cx_lag2$mykey),
         !(mykey %in% cx_lag3$mykey))

cx_lag5 <- cx_1pg |> filter((Qualifiers == "CX Bi" & lag(SellerBrokerID, 5) == SellerBrokerID) |
                          (Qualifiers == "CX Si" & lag(BuyerBrokerID, 5) == BuyerBrokerID) |
                          (Qualifiers == "CX" & lag(SellerBrokerID, 5) == SellerBrokerID) |
                          (Qualifiers == "CX" & lag(BuyerBrokerID, 5) == BuyerBrokerID)) |>
  filter(!(mykey %in% cx_lag1$mykey),
         !(mykey %in% cx_lag2$mykey),
         !(mykey %in% cx_lag3$mykey),
         !(mykey %in% cx_lag4$mykey))
```

```{r}
tbl_cx_lag <- data.frame(lag = c("lag1", "lag2", "lag3", "lag4", "lag5"),
                         count = c(nrow(cx_lag1), nrow(cx_lag2), nrow(cx_lag3), nrow(cx_lag4), nrow(cx_lag5)))

total_cx_lag <- sum(nrow(cx_lag1), nrow(cx_lag2), nrow(cx_lag3), nrow(cx_lag4), nrow(cx_lag5))
total_cx <- nrow(trade_cx_1pg[idx_cx, ])
tbl_cxlag_cxtot <- data.frame(cx = c("lag", "total_cx"),
                              count = c(total_cx_lag, total_cx))
```

```{r}
tbl_cx_lag |> ggplot() +
  geom_col(aes(x = lag, y = count)) +
  labs(title = "Broker's Last Trade before Center Point Trading",
       subtitle = "Stock: 1PG",
       x = "Last Trade")

tbl_cxlag_cxtot |> ggplot() +
  geom_col(aes(x = cx, y = count)) +
  labs(title = "Last Trades within 5 lag vs Total CX",
       subtitle = "Stock: 1PG",
       x = " ")
```

## What is interesting?

- Most market participants already trade within 5 lags before their CX trading, suggesting they already try to buy or sell their shares at prices close to the best bid/ask.
- However they do not want to meet the best bid/ask, but instead want to meet in the middle. Hence, they place orders on the CX table, where other traders can meet the order.
- CX Bi (buyer initiator) suggests brokers who are desperate to sell their shares (place sell order on the CX table to be met by buyer), while CX Si (seller initiator) suggests brokers who are desperate to buy shares (place buy order on the CX table to be met by seller). The plot already takes this into consideration.
- The pattern shows that Center Point Trading is needed on many occasion by market participants. IDX may implement Center Point Trading if it is proven beneficial.

## What more can be done?

- Instead of using last trade, using last orders may be more appropriate.

## Challenge

- Not many papers discuss center point trades.
- Using assumptions about how market participant behaves. 
