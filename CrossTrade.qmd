---
title: "Research Project"
author: "Bagas Trilaksonoaji"
date: "`r Sys.Date()`"
format: 
  html:
    toc: true
    number-sections: true
editor: visual
execute: 
  echo: false
  message: false
  warning: false
cache: TRUE
editor_options: 
  chunk_output_type: inline
---

```{r}
library(tidyverse)
library(knitr)
library(kableExtra)
options(knitr.table.html.attr = "quarto-disable-processing=true")
library(chron)
library(hms)
library(lubridate)
library(tidymodels)
library(discrim)
library(rpart)
library(rpart.plot)
library(randomForest)
library(themis)
```

# Introduction

## Australian Stock Exchange

ASX is an integrated exchange offering listings, trading, clearing, settlement, technical and information services, technology, data and other post-trade services.

It acts as a market operator, clearing house and payments system facilitator. It oversees compliance with its operating rules, promotes standards of corporate governance among Australiaâ€™s listed companies and helps to educate retail investors.

ASX operates markets for a wide range of asset classes including **equities**, fixed income, commodities and energy.

## Data

Historical trade data in ASX from 2011 - 2015.

Initial: trade data of 1 stock in the year 2015.

## Topics

Price Impact of Cross Trades

A **cross trade** occurs when both the buyer and seller sides of a trade are handled by the same broker.

**Price impact** refers to the effect that a trade, or a series of trades, has on the market price of a stock. It measures how much the price of a stock moves as a result of trading activity.

### Hypothesis

Cross trades have a greater price impact than regular trades because they are more information-driven.

# Data

```{r}
all_1pg <- read.csv("data/1pg-all-dates.csv", colClasses = c(BidID = "character", AskID = "character"))

trade_1pg <- all_1pg |> filter(RecordType == "TRADE")
```

1PG Trades Count (2015) by Qualifiers:

```{r}
trade_1pg |>
  group_by(Qualifiers) |>
  summarise(count = n()) |> 
  kable() |>
  kable_styling(full_width = FALSE)

```

We do not care about Center Point trades, because they do not influence market price directly. Hence, take them out. We also do not need Auction trades. It leaves us with XT Bi, XT Si, Bi and Si Trades.

```{r}
trade_1pg_fl <- trade_1pg |>
  filter(Qualifiers %in% c("XT Bi", "XT Si", "Bi", "Si")) |>
  mutate(HourMinuteSecond = hms::as_hms(HourMinuteSecond),
         dttm = paste(RecordDate, HourMinuteSecond, sep = "."))

trade_1pg_fl$dttm <- as.POSIXct(trade_1pg_fl$dttm, format = "%Y-%m-%d.%H:%M:%S") + milliseconds(trade_1pg_fl$MilliSecond)

trade_1pg_fl <- trade_1pg_fl |>
  filter(HourMinuteSecond > as_hms("10:00:00") &
           HourMinuteSecond <= as_hms("16:00:00"))

trade_1pg_fl |> 
  group_by(Qualifiers) |>
  summarise(count = n()) |>
  kable() |>
  kable_styling(full_width = FALSE)

```

# Analysis

## XT vs Non-XT

```{r}
trade_1pg_xt <- trade_1pg_fl |>
  filter(Qualifiers %in% c("XT Bi", "XT Si"))

trade_1pg_noxt <- trade_1pg_fl |>
  filter(Qualifiers %in% c("Bi", "Si"))

ggplot() +
  geom_density(data = trade_1pg_xt,
               aes(x = HourMinuteSecond, fill = "XT"),
               alpha = 0.4) +
  geom_density(data = trade_1pg_noxt,
               aes(x = HourMinuteSecond, fill = "NON-XT"),
               alpha = 0.4) +
  scale_fill_manual(values = c("XT" = "maroon", "NON-XT" = "steelblue"),
                    name = "Trade") +
  labs(title = "Density of XT and Non-XT by Time",
       subtitle = "1PG Stock (2015)",
       x = "Time") +
  theme_bw()

```

## Price Impact

Price impact is measured using:

Absolute value of Natural logarithm of the ratio of the best bid-ask mid-quote 5 minutes after the Cross Trade, divided by the prevailing best bid-ask mid-quote at the time of the trade. $$ PI5 = |ln(MidQuote_5/MidQuote_0)|$$

```{r}
# tidy L1 data
L1_1pg <- read.csv("data/1pg-L1-data.csv")

L1_1pg_fl <- L1_1pg |>
  mutate(HourMinuteSecond = hms::as_hms(HourMinuteSecond),
         dttm = paste(RecordDate, HourMinuteSecond, sep = "."),
         midquote = (L1BidPrice+L1AskPrice)/2) |>
  filter(HourMinuteSecond > as_hms("10:00:00") &
           HourMinuteSecond <= as_hms("16:00:00"))

L1_1pg_fl$dttm <- as.POSIXct(L1_1pg_fl$dttm, format = "%Y-%m-%d.%H:%M:%S") + milliseconds(L1_1pg_fl$MilliSecond)

```

```{r}
# create new table for merging (dttm - 5 min) 
L1_1pg_fl_later <- L1_1pg_fl |>
  mutate(dttm_5 = dttm - lubridate::minutes(5),
         midquote_5 = midquote) |>
  select(dttm_5, midquote_5)

# remove duplicate dttm, ensure 1 row to merge (the last)
L1_1pg_fl_later <- L1_1pg_fl_later |>
  group_by(dttm_5) |>
  slice_tail(n = 1) |>
  ungroup()
```

```{r}
# # create function to find closest dttm
# closest_dttm <- function(dttm1, dttm2) {
#   dttm2[which.min(abs(difftime(dttm2, dttm1)))]
# }
# 
# closest_dttm2 <- function(dttm1, dttm2) {
#   closest_time <- max(dttm2[dttm2 < dttm1], na.rm = TRUE)
#  
#   return(closest_time)
# }
# 
# # Find closest dttm_5
# trade_1pg_fl_5 <- trade_1pg_fl |>
#   rowwise() |>
#   mutate(closest = closest_dttm(dttm, L1_1pg_fl_later$dttm_5))
# 
# # left join to get the midquote_5
# trade_1pg_fl_5 <- trade_1pg_fl_5 |>
#   left_join(L1_1pg_fl_later, by = c("closest" = "dttm_5"))
# 
# # midquote at XT
# 
# trade_1pg_fl_5 <- trade_1pg_fl_5 |>
#   left_join((L1_1pg_fl |>
#               select(dttm, midquote)), 
#             by = "dttm")
# 
# # midquote at XT for non-exact dttm trade-L1
# trade_1pg_fl_5_na <- trade_1pg_fl_5 |>
#   filter(is.na(midquote))
# 
# trade_1pg_fl_5_na <- trade_1pg_fl_5_na |>
#   rowwise() |>
#   mutate(closest_na = closest_dttm2(dttm, L1_1pg_fl$dttm))
# 
# trade_1pg_fl_5_na <- trade_1pg_fl_5_na |>
#   select(-midquote) |>
#   left_join((L1_1pg_fl |>
#               select(dttm, midquote)), 
#             by = c("closest_na" = "dttm"))
# 
# trade_1pg_fl_5 <- trade_1pg_fl_5 |>
#   left_join((trade_1pg_fl_5_na |>
#                select(mykey, midquote)),
#             by = "mykey", suffix = c("", "_na")) |>
#   mutate(midquote = ifelse(is.na(midquote), midquote_na, midquote)) |>
#   select(-midquote_na) 
#   
# # create price impact column
# trade_1pg_fl_5 <- trade_1pg_fl_5 |>
#   mutate(PI = abs(log(midquote_5 / midquote)))
# 
# trade_1pg_fl_5 <- trade_1pg_fl_5 |> 
#     filter(HourMinuteSecond > as_hms("10:00:00") &
#            HourMinuteSecond <= as_hms("16:00:00"))
# 
# save(trade_1pg_fl_5, file = "data/trade_1pg_fl_5L1")

```

### XT vs All Non-XT

```{r}
load("data/trade_1pg_fl_5L1")

# mean PI
trade_1pg_fl_5 |> 
  filter(!is.na(PI)) |>
  group_by(Qualifiers) |>
  summarise(PI5_mean = mean(PI))

```

```{r}
xt_5 <-trade_1pg_fl_5 |>
  filter(Qualifiers %in% c("XT Bi", "XT Si")) |>
  group_by(RecordDate) |>
  summarise(price_impact = sum(PI, na.rm = TRUE),
            freq = n()) |>
  mutate(avg = price_impact/freq)

nonxt_5 <- trade_1pg_fl_5 |>
  filter(Qualifiers %in% c("Bi", "Si")) |>
  group_by(RecordDate) |>
  summarise(price_impact = sum(PI, na.rm = TRUE),
            freq = n()) |>
  mutate(avg = price_impact/freq)

# visualisation

daily_pi <- left_join(xt_5, nonxt_5, by = "RecordDate") |>
  rename(xt = avg.x,
         nonxt = avg.y)

daily_pi |>
  select(RecordDate, xt, nonxt) |>
  pivot_longer(cols = c(xt, nonxt), names_to = "type", values_to = "price_impact") |>
  ggplot() +
  geom_col(aes(x = RecordDate, y = price_impact, fill = type), position = "dodge") +
  labs(title = "Daily Average Price Impact XT vs Non-XT",
       subtitle = "Stock: 1PG",
       y = "Price Impact")
```

### XT vs Matched Trades

```{r, eval = FALSE}
# Function to match trades for a single row
match_trade <- function(row, df) {
  df |>
    filter(
      !grepl("XT", Qualifiers),
      (grepl("Bi", row$Qualifiers) & grepl("Bi", Qualifiers) |
          grepl("Si", row$Qualifiers) & grepl("Si", Qualifiers)
      ),
      mykey != row$mykey,
      abs(Volume - row$Volume) / row$Volume <= 0.1,
      dttm <= row$dttm - lubridate::minutes(5)
    ) |>
    pull(mykey)
}

match_trade <- function(row, df) {
  df |>
    filter(
      !grepl("XT", Qualifiers),
      (grepl("Bi", row$Qualifiers) & grepl("Bi", Qualifiers) |
          grepl("Si", row$Qualifiers) & grepl("Si", Qualifiers)
      ),
      mykey != row$mykey,
      abs(Volume - row$Volume) / row$Volume <= 0.1,
      dttm == row$dttm - lubridate::minutes(5)
    ) |>
    pull(mykey)
}

trade_1pg_fl_5 <- tail(trade_1pg_fl_5, 10000)

# Apply the function to each row where XT qualifiers are present
df_temp <- trade_1pg_fl_5 |>
  filter(grepl("XT", Qualifiers)) |>
  mutate(matched_keys = map(mykey, ~ match_trade(trade_1pg_fl_5[trade_1pg_fl_5$mykey == .x, ], trade_1pg_fl_5)))

matched_trade_key <- unlist(df_temp$matched_keys) |> unique()

df_xt_matched <- trade_1pg_fl_5 |>
  filter(mykey %in% matched_trade_key |
           Qualifiers %in% c("XT Bi", "XT Si"))

# save(df_xt_matched, file = "df_xt_matched_10000")

load("data/df_xt_matched_10000")
```

```{r, eval = FALSE}
# mean PI
df_xt_matched |> 
  group_by(Qualifiers) |>
  summarise(PI5_mean = mean(PI))

df_xt_matched$PI |> 
  summary()
```

```{r, eval = FALSE}
xt_5_2 <- df_xt_matched |>
  filter(Qualifiers %in% c("XT Bi", "XT Si")) |>
  group_by(RecordDate) |>
  summarise(price_impact = sum(PI),
            freq = n()) |>
  mutate(avg = price_impact/freq)

nonxt_5_2 <- df_xt_matched |>
  filter(Qualifiers %in% c("Bi", "Si")) |>
  group_by(RecordDate) |>
  summarise(price_impact = sum(PI),
            freq = n()) |>
  mutate(avg = price_impact/freq)

# visualisation

daily_pi_2 <- left_join(xt_5_2, nonxt_5_2, by = "RecordDate") |>
  rename(xt = avg.x,
         nonxt = avg.y)

daily_pi_2 |>
  select(RecordDate, xt, nonxt) |>
  pivot_longer(cols = c(xt, nonxt), names_to = "type", values_to = "price_impact") |>
  ggplot() +
  geom_col(aes(x = RecordDate, y = price_impact, fill = type), position = "dodge") +
  labs(title = "Daily Average Price Impact XT vs Non-XT",
       subtitle = "Stock: 1PG",
       y = "Price Impact")
```

## Possible Topics

### XT for cross-subsidization of funds (informed)

Characteristics:

1.  Done by HFT brokers
2.  XT happened more off the market (transfer the stocks after/before automated HFT)
3.  XT happened:

-   After non-preferred funds (B) buying the stock from market. This could happened for transferring stock from non-preferred (B) to preferred funds (A).
-   After A buying the stock from market. This could happened for transferring stock from A to B.

4.  For control we need:

-   The XT volume should be similar to the buying volume before.
-   Time of buying before the XT should be not far away from the XT

5.  Absolute price impact is greater(?)

### XT for principal profit (informed)

Principal profit:

-   move unwanted shares to clients
-   take wanted shares from clients

Characteristics:

1.  Done by retail brokers
2.  XT happened more off the market

-   XT happened:
    -   After brokers buying the stock from market. This could happened for moving unwanted stock to clients.
    -   After clients buying the stock from the market. This could happened for taking wanted stocks clients.
    -   Execution price similar than prevailing market price. In non-informed XT, usually premium/discount are exist, as buyer/seller wants to buy/sell desperately. Hence, if the premium/discount are non-existent, the other party may be given or have different information.

3.  Absolute price impact is greater(?)

### Price Impacting XT (non-informed)

Characteristics:

1.  Done by institutional brokers (high capital)
2.  Happened on the market, hence impacting price
3.  buy/ask order time and volume are similar (predetermined)
4.  happened quite frequently in short period of time
5.  very aggressive (absorb the liquidity)
6.  price impact is greater(?)

### XT for transaction fee (non-informed))

1.  Done by institutional and retail brokers
2.  On-the-market. XT happened with similar volume and time of orders
3.  Not as aggressive
4.  price impact is not greater than regular trades

## XT Statistics

```{r}
jan_1pg <- read.csv("data/1PGJan2015orderbook.csv", colClasses = c(BidID = "character", AskID = "character"))

jan_1pg <- jan_1pg |>
  select(-Count) |>
  distinct() |>
  mutate(hms = hms::as_hms(HourMinuteSecond)) |>
  filter(hms > as_hms("10:00:00"),
         hms < as_hms("16:00:00"))
  

tes <- jan_1pg |> filter(AskID == "6504725087869854637")

jan_1pgxt <- read.csv("data/1PGJan2015orderbookXT.csv", colClasses = c(BidID = "character", AskID = "character"))
```

```{r}
# trade_1pg_fl_5 |> 
#   filter(month(dttm) == 1,
#          Qualifiers %in% c("XT Bi", "XT Si")) 
```

```{r}
jan_1pgxt2 <- jan_1pgxt |> 
  distinct(Mykey, .keep_all = TRUE) |>
  mutate(p_impr = ifelse(Price > Bid_before & Price < Ask_before,
                         1,
                         ifelse(Price == Bid_before | Price == Ask_before, 2, 3)))
```

### Price Improvement Statistics on January

```{r}
jan_1pgxt2 |> 
  count(p_impr) |>
  mutate(count = n,
         desc = c("price improvement", "best bid/ask", "outside"),
         percentage = round(count / sum(count) * 100, 2)) |>
  select(desc, count, percentage) |>
  kable() |>
  kable_styling(full_width = FALSE)

```

```{r}
tes <- all_1pg |> 
  mutate(hms = hms::as_hms(HourMinuteSecond)) |>
  filter(Volume == 1,
         hms > as_hms("10:00:00"),
         hms < as_hms("16:00:00"))

jan9 <- all_1pg |> filter(RecordDate == "2015-01-09")
```

## TWPI

```{r}
l1 <- read.csv("data/1pg-L1-data.csv")

all_1pg_session <- all_1pg |>
  mutate(RecordDate = lubridate::ymd(RecordDate),
         hms = hms::as_hms(HourMinuteSecond)) |>
  filter(hms > as_hms("10:00:00"),
         hms < as_hms("16:00:00"))

# # remove duplicates
# jan_1pg_best <- jan_1pg |>
#   select(Mykey, Bid_before, Ask_before) |>
#   filter(!is.na(Bid_before),
#          !is.na(Ask_before)) |>
#   rename(mykey = Mykey)
# 
# all_1pg_best <- all_1pg_session |> left_join(jan_1pg_best, by = "mykey")


l1_lag <- l1 |>
  mutate(lagged_bid = lag(L1BidPrice),
         lagged_ask = lag(L1AskPrice),
         RecordDate = lubridate::ymd(RecordDate)) |>
  select(RecordDate, HourMinuteSecond, MilliSecond, lagged_bid, lagged_ask)


all_1pg_best <- all_1pg_session |>
  left_join(l1_lag, by = c("RecordDate","HourMinuteSecond","MilliSecond")) |>
  fill(lagged_bid, .direction = "up") |>
  fill(lagged_ask, .direction = "up") |>
  rename(bid_before = lagged_bid,
         ask_before = lagged_ask)

```

```{r}
twpi <- all_1pg_best |> 
  filter(RecordType == "OFFTR",
         Qualifiers == "NX XT") |>
  mutate(code = ifelse(Price > bid_before & Price < ask_before,
                       "within",
                       ifelse(Price == bid_before | Price == ask_before, "at best", "outside")))


twpi |>
  count(code) |>
  mutate(count = n,
         desc = code,
         percentage = round(count / sum(count) * 100, 2)) |>
  select(desc, count, percentage) |>
  kable() |>
  kable_styling(full_width = FALSE)

twpi |> 
  group_by(code) |>
  count(BuyerBrokerID) |>
  rename(`Trade Price` = code) |>
  ungroup() |>
  group_by(BuyerBrokerID) |>
  mutate(percentage = round(n / sum(n) * 100, 2)) |>
  arrange(BuyerBrokerID) |>
    kable() |>
  kable_styling(full_width = FALSE)

twpi |> 
  group_by(code) |>
  count(BuyerBrokerID) |>
  rename(`Trade Price` = code) |>
  ggplot(aes(x = as.factor(BuyerBrokerID), y = n, fill = `Trade Price`)) +
  geom_col(position = "dodge") +
  theme_bw() +
  labs(title = "Crossing Trades Reported as TWPI",
       x = "Broker ID",
       y = "NX XT Counts")
```

```{r}
twpi |> 
  group_by(BuyerBrokerID) |>
  count(BuyerBrokerID) |>
  ungroup() |>
  mutate(count = n,
         percentage = round(count / sum(count) * 100, 2))
```

## TWPI All

```{r}
list_2012 <- list.files(path = "data/2012/", pattern = "*.csv", full.names = TRUE)
list_2013 <- list.files(path = "data/2013/", pattern = "*.csv", full.names = TRUE)
list_2014 <- list.files(path = "data/2014/", pattern = "*.csv", full.names = TRUE)
list_2015 <- list.files(path = "data/2015/", pattern = "*.csv", full.names = TRUE)

# read all CSV files into a list of data frames
df_list_2012 <- lapply(list_2012, function(file) {
  read.csv(file, colClasses = c(Mykey = "character", BidID = "character", AskID = "character"))
  })
df_list_2013 <- lapply(list_2013, function(file) {
  read.csv(file, colClasses = c(Mykey = "character", BidID = "character", AskID = "character"))
  })
df_list_2014 <- lapply(list_2014, function(file) {
  read.csv(file, colClasses = c(Mykey = "character", BidID = "character", AskID = "character"))
  })
df_list_2015 <- lapply(list_2015, function(file) {
  read.csv(file, colClasses = c(Mykey = "character", BidID = "character", AskID = "character"))
  })

df_list <- c(df_list_2012, df_list_2013, df_list_2014, df_list_2015)

# combine the data frames into a single data frame
twpi_df <- bind_rows(df_list)

# save the df 
# save(twpi_df, file = "data/twpi_2012-2015")

```

```{r}
twpi_2014 <- bind_rows(df_list_2014)

dup <- twpi_2014 |> group_by(Mykey) |> count(Mykey) |> filter(n > 1)

tes <- twpi_2014 |> filter(Mykey %in% c("368013045", "368013048"))

twpi_df$Mykey |> duplicated() |> sum()
```


