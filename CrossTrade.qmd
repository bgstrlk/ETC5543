---
title: "Research Project"
author: "Bagas Trilaksonoaji"
date: "`r Sys.Date()`"
format: 
  html:
    toc: true
    number-sections: true
editor: visual
editor_options: 
  chunk_output_type: console
execute: 
  echo: false
  message: false
  warning: false
cache: TRUE
---

```{r}
library(tidyverse)
library(knitr)
library(kableExtra)
options(knitr.table.html.attr = "quarto-disable-processing=true")
library(chron)
library(hms)
```

# Introduction

## Australian Stock Exchange

ASX is an integrated exchange offering listings, trading, clearing, settlement, technical and information services, technology, data and other post-trade services.

It acts as a market operator, clearing house and payments system facilitator. It oversees compliance with its operating rules, promotes standards of corporate governance among Australiaâ€™s listed companies and helps to educate retail investors.

ASX operates markets for a wide range of asset classes including **equities**, fixed income, commodities and energy.

## Data

Historical trade data in ASX from 2011 - 2015.

Initial: trade data of 1 stock in the year 2015.

## Topics

Price Impact of Cross Trades

A **cross trade** occurs when both the buyer and seller sides of a trade are handled by the same broker.

**Price impact** refers to the effect that a trade, or a series of trades, has on the market price of a stock. It measures how much the price of a stock moves as a result of trading activity.

### Hypothesis

Cross trades have a greater price impact than regular trades because they are more information-driven.

# Data

```{r}
all_1pg <- read.csv("data/1pg-all-dates.csv", colClasses = c(BidID = "character", AskID = "character"))

trade_1pg <- all_1pg |> filter(RecordType == "TRADE")
```

1PG Trades Count (2015) by Qualifiers:

```{r}
trade_1pg |>
  group_by(Qualifiers) |>
  summarise(count = n()) |> 
  kable() |>
  kable_styling(full_width = FALSE)

```

We do not care about Center Point trades, because they do not influence market price directly. Hence, take them out. We also do not need Auction trades. It leaves us with XT Bi, XT Si, Bi and Si Trades.

```{r}
trade_1pg_fl <- trade_1pg |>
  filter(Qualifiers %in% c("XT Bi", "XT Si", "Bi", "Si")) |>
  mutate(HourMinuteSecond = hms::as_hms(HourMinuteSecond),
         dttm = paste(RecordDate, HourMinuteSecond, sep = "."))

trade_1pg_fl$dttm <- as.POSIXct(trade_1pg_fl$dttm, format = "%Y-%m-%d.%H:%M:%S") + milliseconds(trade_1pg_fl$MilliSecond)

trade_1pg_fl <- trade_1pg_fl |>
  filter(HourMinuteSecond > as_hms("10:00:00") &
           HourMinuteSecond <= as_hms("16:00:00"))

trade_1pg_fl |> 
  group_by(Qualifiers) |>
  summarise(count = n()) |>
  kable() |>
  kable_styling(full_width = FALSE)

```

# Analysis

## XT vs Non-XT

```{r}
trade_1pg_xt <- trade_1pg_fl |>
  filter(Qualifiers %in% c("XT Bi", "XT Si"))

trade_1pg_noxt <- trade_1pg_fl |>
  filter(Qualifiers %in% c("Bi", "Si"))

ggplot() +
  geom_density(data = trade_1pg_xt,
               aes(x = HourMinuteSecond, fill = "XT"),
               alpha = 0.4) +
  geom_density(data = trade_1pg_noxt,
               aes(x = HourMinuteSecond, fill = "NON-XT"),
               alpha = 0.4) +
  scale_fill_manual(values = c("XT" = "maroon", "NON-XT" = "steelblue"),
                    name = "Trade") +
  labs(title = "Density of XT and Non-XT by Time",
       subtitle = "1PG Stock (2015)",
       x = "Time") +
  theme_bw()

```

## Price Impact

Price impact is measured using:

Absolute value of Natural logarithm of the ratio of the best bid-ask mid-quote 5 minutes after the Cross Trade, divided by the prevailing best bid-ask mid-quote at the time of the trade. $$ PI5 = |ln(MidQuote_5/MidQuote_0)|$$

```{r}
# tidy L1 data
L1_1pg <- read.csv("data/1pg-L1-data.csv")

L1_1pg_fl <- L1_1pg |>
  mutate(HourMinuteSecond = hms::as_hms(HourMinuteSecond),
         dttm = paste(RecordDate, HourMinuteSecond, sep = "."),
         midquote = (L1BidPrice+L1AskPrice)/2) |>
  filter(HourMinuteSecond > as_hms("10:00:00") &
           HourMinuteSecond <= as_hms("16:00:00"))

L1_1pg_fl$dttm <- as.POSIXct(L1_1pg_fl$dttm, format = "%Y-%m-%d.%H:%M:%S") + milliseconds(L1_1pg_fl$MilliSecond)

```

```{r}
# create new table for merging (dttm - 5 min) 
L1_1pg_fl_later <- L1_1pg_fl |>
  mutate(dttm_5 = dttm - lubridate::minutes(5),
         midquote_5 = midquote) |>
  select(dttm_5, midquote_5)

# remove duplicate dttm, ensure 1 row to merge (the last)
L1_1pg_fl_later <- L1_1pg_fl_later |>
  group_by(dttm_5) |>
  slice_tail(n = 1) |>
  ungroup()
```

```{r}
# # create function to find closest dttm
# closest_dttm <- function(dttm1, dttm2) {
#   dttm2[which.min(abs(difftime(dttm2, dttm1)))]
# }
# 
# closest_dttm2 <- function(dttm1, dttm2) {
#   closest_time <- max(dttm2[dttm2 < dttm1], na.rm = TRUE)
#  
#   return(closest_time)
# }
# 
# # Find closest dttm_5
# trade_1pg_fl_5 <- trade_1pg_fl |>
#   rowwise() |>
#   mutate(closest = closest_dttm(dttm, L1_1pg_fl_later$dttm_5))
# 
# # left join to get the midquote_5
# trade_1pg_fl_5 <- trade_1pg_fl_5 |>
#   left_join(L1_1pg_fl_later, by = c("closest" = "dttm_5"))
# 
# # midquote at XT
# 
# trade_1pg_fl_5 <- trade_1pg_fl_5 |>
#   left_join((L1_1pg_fl |>
#               select(dttm, midquote)), 
#             by = "dttm")
# 
# # midquote at XT for non-exact dttm trade-L1
# trade_1pg_fl_5_na <- trade_1pg_fl_5 |>
#   filter(is.na(midquote))
# 
# trade_1pg_fl_5_na <- trade_1pg_fl_5_na |>
#   rowwise() |>
#   mutate(closest_na = closest_dttm2(dttm, L1_1pg_fl$dttm))
# 
# trade_1pg_fl_5_na <- trade_1pg_fl_5_na |>
#   select(-midquote) |>
#   left_join((L1_1pg_fl |>
#               select(dttm, midquote)), 
#             by = c("closest_na" = "dttm"))
# 
# trade_1pg_fl_5 <- trade_1pg_fl_5 |>
#   left_join((trade_1pg_fl_5_na |>
#                select(mykey, midquote)),
#             by = "mykey", suffix = c("", "_na")) |>
#   mutate(midquote = ifelse(is.na(midquote), midquote_na, midquote)) |>
#   select(-midquote_na) 
#   
# # create price impact column
# trade_1pg_fl_5 <- trade_1pg_fl_5 |>
#   mutate(PI = abs(log(midquote_5 / midquote)))
# 
# trade_1pg_fl_5 <- trade_1pg_fl_5 |> 
#     filter(HourMinuteSecond > as_hms("10:00:00") &
#            HourMinuteSecond <= as_hms("16:00:00"))
# 
# save(trade_1pg_fl_5, file = "data/trade_1pg_fl_5L1")

```

### XT vs All Non-XT

```{r}
load("data/trade_1pg_fl_5L1")

# mean PI
trade_1pg_fl_5 |> 
  filter(!is.na(PI)) |>
  group_by(Qualifiers) |>
  summarise(PI5_mean = mean(PI))

```

```{r}
xt_5 <-trade_1pg_fl_5 |>
  filter(Qualifiers %in% c("XT Bi", "XT Si")) |>
  group_by(RecordDate) |>
  summarise(price_impact = sum(PI, na.rm = TRUE),
            freq = n()) |>
  mutate(avg = price_impact/freq)

nonxt_5 <- trade_1pg_fl_5 |>
  filter(Qualifiers %in% c("Bi", "Si")) |>
  group_by(RecordDate) |>
  summarise(price_impact = sum(PI, na.rm = TRUE),
            freq = n()) |>
  mutate(avg = price_impact/freq)

# visualisation

daily_pi <- left_join(xt_5, nonxt_5, by = "RecordDate") |>
  rename(xt = avg.x,
         nonxt = avg.y)

daily_pi |>
  select(RecordDate, xt, nonxt) |>
  pivot_longer(cols = c(xt, nonxt), names_to = "type", values_to = "price_impact") |>
  ggplot() +
  geom_col(aes(x = RecordDate, y = price_impact, fill = type), position = "dodge") +
  labs(title = "Daily Average Price Impact XT vs Non-XT",
       subtitle = "Stock: 1PG",
       y = "Price Impact")
```

### XT vs Matched Trades

```{r, eval = FALSE}
# Function to match trades for a single row
match_trade <- function(row, df) {
  df |>
    filter(
      !grepl("XT", Qualifiers),
      (grepl("Bi", row$Qualifiers) & grepl("Bi", Qualifiers) |
          grepl("Si", row$Qualifiers) & grepl("Si", Qualifiers)
      ),
      mykey != row$mykey,
      abs(Volume - row$Volume) / row$Volume <= 0.1,
      dttm <= row$dttm - lubridate::minutes(5)
    ) |>
    pull(mykey)
}

match_trade <- function(row, df) {
  df |>
    filter(
      !grepl("XT", Qualifiers),
      (grepl("Bi", row$Qualifiers) & grepl("Bi", Qualifiers) |
          grepl("Si", row$Qualifiers) & grepl("Si", Qualifiers)
      ),
      mykey != row$mykey,
      abs(Volume - row$Volume) / row$Volume <= 0.1,
      dttm == row$dttm - lubridate::minutes(5)
    ) |>
    pull(mykey)
}

trade_1pg_fl_5 <- tail(trade_1pg_fl_5, 10000)

# Apply the function to each row where XT qualifiers are present
df_temp <- trade_1pg_fl_5 |>
  filter(grepl("XT", Qualifiers)) |>
  mutate(matched_keys = map(mykey, ~ match_trade(trade_1pg_fl_5[trade_1pg_fl_5$mykey == .x, ], trade_1pg_fl_5)))

matched_trade_key <- unlist(df_temp$matched_keys) |> unique()

df_xt_matched <- trade_1pg_fl_5 |>
  filter(mykey %in% matched_trade_key |
           Qualifiers %in% c("XT Bi", "XT Si"))

# save(df_xt_matched, file = "df_xt_matched_10000")

load("data/df_xt_matched_10000")
```

```{r, eval = FALSE}
# mean PI
df_xt_matched |> 
  group_by(Qualifiers) |>
  summarise(PI5_mean = mean(PI))

df_xt_matched$PI |> 
  summary()
```

```{r, eval = FALSE}
xt_5_2 <- df_xt_matched |>
  filter(Qualifiers %in% c("XT Bi", "XT Si")) |>
  group_by(RecordDate) |>
  summarise(price_impact = sum(PI),
            freq = n()) |>
  mutate(avg = price_impact/freq)

nonxt_5_2 <- df_xt_matched |>
  filter(Qualifiers %in% c("Bi", "Si")) |>
  group_by(RecordDate) |>
  summarise(price_impact = sum(PI),
            freq = n()) |>
  mutate(avg = price_impact/freq)

# visualisation

daily_pi_2 <- left_join(xt_5_2, nonxt_5_2, by = "RecordDate") |>
  rename(xt = avg.x,
         nonxt = avg.y)

daily_pi_2 |>
  select(RecordDate, xt, nonxt) |>
  pivot_longer(cols = c(xt, nonxt), names_to = "type", values_to = "price_impact") |>
  ggplot() +
  geom_col(aes(x = RecordDate, y = price_impact, fill = type), position = "dodge") +
  labs(title = "Daily Average Price Impact XT vs Non-XT",
       subtitle = "Stock: 1PG",
       y = "Price Impact")
```
